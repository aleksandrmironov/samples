---
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install mysql repo
  include: mysql_install_repo.yml
  when: ansible_os_family == 'Debian'

- name: Install the mysql packages in Debian derivatives
  apt: name={{ item }} state=installed update_cache=yes
  with_items: mysql_pkgs
  environment: env
  when: ansible_os_family == 'Debian'

- name: Check if apparmor installed
  command: dpkg-query -l apparmor
  register: apparmor_is_installed

- name: Allow access to data directory through AppArmor
  template: src=app_armor.j2 dest=/etc/apparmor.d/usr.sbin.mysqld owner=mysql group=mysql mode=0644
  when: ansible_os_family == 'Debian' and apparmor_is_installed.stdout.find('install ok installed') != -1
  notify:
   - restart apparmor

- name: Copy the my.cnf file 
  template: src=my.cnf.{{ ansible_os_family }}.j2 dest={{ mysql_conf_dir }}/my.cnf

- name: Create the directory /etc/mysql/conf.d
  file: path=/etc/mysql/conf.d state=directory

- name: Start the mysql services
  service: name={{ mysql_service }} state=started enabled=yes

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost' 

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_root_db_pass }}
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost'

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600

- name: create monitoring user
  mysql_user: name=monitoring host=localhost password={{ monitoring_db_pass }} state=present priv={{ monitoring_user_privs|join('/') }}


- name: ensure anonymous users are not in the database
  mysql_user: name='' host={{ item }} state=absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

